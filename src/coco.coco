// Example: Expressions Interpreter

DATA AST           WITH {String translate()}
= Start(String result, List<DataTypeDef> datatypedefs) {
result += "import java.util.*;\n";
result += "abstract class AST{}\n\n";
for (DataTypeDef data : datatypedefs)
result += data.translate();
return result;
}


| DataTypeDef(String dataTypeName, String functionHead, List<Alternative> alternatives, String result, String spaces) {

result += ("abstract class " + dataTypeName +" extends AST {\n");
result += ( spaces + "public abstract " + functionHead +";\n};\n");

for(Alternative alter : alternatives){
    result += "\nclass ";
    alter.datatype = dataTypeName;
    alter.expr = functionHead;
    result += alter.translate() +"\n}\n";

}
return result;
}

| Alternative(String constructor, List<Argument> arguments,  String code) {
result += constructor + " extends " + datatype +"{\n";
        for (Argument args : arguments){
            result += spaces +  args.translate() + ";" + "\n";
        }

        result += spaces + constructor + "(";
        for (Argument args : arguments){
            if(!args.equals(arguments.get(arguments.size() - 1))){
                result += args.type+ " " + args.name + ", ";
            } else {
                result += args.type + " " + args.name + ")";
            }
        }

        result += "{";
        for (Argument args : arguments){
            if(!args.equals(arguments.get(arguments.size() - 1))){
                result += "this." + args.name+ "=" + args.name + "; ";
            } else {
                result += "this." + args.name + "=" + args.name + ";";
            }
        }

        result += " }\n" + spaces + "public " +  expr + " " + code;

        return result;
}

| Argument (String type, String name) {
 result += type + " " + name;

         return result;
}
;
